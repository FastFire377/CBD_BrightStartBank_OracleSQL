
-->>>>>>>>>>>-------------------------------------------------------------------
-- CLEAR DATABASE.
-->>>>>>>>>>>-------------------------------------------------------------------

DROP TRIGGER TRANSACTION_trg;
/

DROP SEQUENCE TRANSACTION_seq;
/

DROP TABLE TRANSACTION_;
/

-->>>>>>>>>>>-------------------------------------------------------------------

ALTER TABLE AGENCY_ DROP COLUMN IdManager;
/

DROP TRIGGER CARD_trg;
/

DROP SEQUENCE CARD_seq;
/

DROP TABLE CARD_;
/

-->>>>>>>>>>>

ALTER TABLE OWNER_ DROP COLUMN idAccount;
/

DROP TABLE OWNER_;
/

-->>>>>>>>>>>

ALTER TABLE ACCOUNT_ DROP COLUMN nif;
/

ALTER TABLE ACCOUNT_ DROP COLUMN idAgency;
/

ALTER TABLE ACCOUNT_ DROP COLUMN idAccountType;
/

DROP TRIGGER ACCOUNT_trg;
/

DROP SEQUENCE ACCOUNT_seq;
/

DROP TABLE ACCOUNT_;
/

-->>>>>>>>>>>

drop PROCEDURE UpdateAge;
/

DROP TABLE CLIENT_;
/

-->>>>>>>>>>>

DROP TABLE EMPLOYEE_;
/

-->>>>>>>>>>>

DROP TRIGGER AGENCY_trg;
/

DROP SEQUENCE AGENCY_seq;
/

DROP TABLE AGENCY_;
/
-->>>>>>>>>>>-------------------------------------------------------------------

DROP TRIGGER LOCATION_trg;
/

DROP SEQUENCE LOCATION_seq;
/

DROP TABLE LOCATION_;
/

-->>>>>>>>>>>

DROP TRIGGER ACCOUNTTYPE_trg;
/

DROP SEQUENCE ACCOUNTTYPE_seq;
/

DROP TABLE ACCOUNTTYPE_;
/

-->>>>>>>>>>>

DROP TRIGGER TRANSACTIONTYPE_trg;
/

DROP SEQUENCE TRANSACTIONTYPE_seq;
/

DROP TABLE TRANSACTIONTYPE_;
/

-->>>>>>>>>>>-------------------------------------------------------------------

DROP TYPE AddressType;
/

-->>>>>>>>>>>

DROP TYPE ContactType;
/

-->>>>>>>>>>>-------------------------------------------------------------------

DROP TABLESPACE STATIC_TABLE_SPACE INCLUDING CONTENTS AND DATAFILES;
/

-->>>>>>>>>>>

DROP TABLESPACE NORMALS_TABLE_SPACE INCLUDING CONTENTS AND DATAFILES;
/

-->>>>>>>>>>>

DROP TABLESPACE TRANSACTION_TABLE_SPACE INCLUDING CONTENTS AND DATAFILES;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- TYPES Address AND Contact.
-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TYPE AddressType AS OBJECT ( 
    street VARCHAR(45),
    districtProvince VARCHAR(45),
    country VARCHAR(45)
);
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TYPE ContactType AS OBJECT ( 
    nin number(3),
    Contact NUMBER(9),
    email VARCHAR(45)
);
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- TABLESPACE STATIC AND TABLES LOCATION, ACCOUNT TYPE AND TRANSACTION TYPE.
-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLESPACE STATIC_TABLE_SPACE
DATAFILE 'static_tablesV2.dbf' SIZE 50M
AUTOEXTEND ON NEXT 5M
MAXSIZE UNLIMITED;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE LOCATION_(
    idLocation NUMBER(9) PRIMARY KEY,
    districtProvince varchar(99),
    country VARCHAR(45)
);
/
-->>>>>>>>>>>

ALTER TABLE LOCATION_ MOVE TABLESPACE STATIC_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE LOCATION_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER LOCATION_trg
BEFORE INSERT ON LOCATION_
FOR EACH ROW
BEGIN
  SELECT LOCATION_seq.NEXTVAL
  INTO :new.idLocation
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE ACCOUNTTYPE_(
     idAccountType NUMBER(9) PRIMARY KEY,
     nameAccountType VARCHAR(45),
     description VARCHAR(45),
     minimumRequirements VARCHAR(99)
);
/

-->>>>>>>>>>>

ALTER TABLE ACCOUNTTYPE_ MOVE TABLESPACE STATIC_TABLE_SPACE;
/
 
-->>>>>>>>>>>

CREATE SEQUENCE ACCOUNTTYPE_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER ACCOUNTTYPE_trg
BEFORE INSERT ON ACCOUNTTYPE_
FOR EACH ROW
BEGIN
  SELECT ACCOUNTTYPE_seq.NEXTVAL
  INTO :new.idAccountType
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE TRANSACTIONTYPE_(
     idTransactionType NUMBER(9) PRIMARY KEY,
     nameTransactionType VARCHAR(45),
     description VARCHAR(45),
     appliedRate VARCHAR(45),
     LimeteTransaction FLOAT
);
/

-->>>>>>>>>>>

ALTER TABLE TRANSACTIONTYPE_ MOVE TABLESPACE STATIC_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE TRANSACTIONTYPE_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER TRANSACTIONTYPE_trg
BEFORE INSERT ON TRANSACTIONTYPE_
FOR EACH ROW
BEGIN
  SELECT TRANSACTIONTYPE_seq.NEXTVAL
  INTO :new.idTransactionType
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- TABLESPACE NORMALS AND TABLES AGENCY, EMPLOYEE, CLIENT, ACCOUNT AND CARD.
-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLESPACE NORMALS_TABLE_SPACE
DATAFILE 'regular_tablesV2.dbf' SIZE 50M
AUTOEXTEND ON NEXT 5M
MAXSIZE UNLIMITED;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE AGENCY_(
    idAgency NUMBER(9) PRIMARY KEY,
    nameAgency varchar(45),
    openingHours varchar(45),
    NEmployees number,
    Contact ContactType,
    --forein keyss
    idLocation NUMBER(9),
    FOREIGN KEY (idLocation) REFERENCES LOCATION_(idLocation)
    
);
/

-->>>>>>>>>>>

ALTER TABLE AGENCY_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE AGENCY_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER AGENCY_trg
BEFORE INSERT ON AGENCY_
FOR EACH ROW
BEGIN
  SELECT AGENCY_seq.NEXTVAL
  INTO :new.idAgency
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE EMPLOYEE_(
    nif NUMBER(9) PRIMARY KEY,
    nameEmployee  VARCHAR(45),
    surname VARCHAR(45),
    Contact ContactType,
    address AddressType,
    email VARCHAR(99),
    age number(3),
    dateBirth date,
    iban VARCHAR(99),
    JobRole VARCHAR(45),
    salary NUMBER(20),
    idAgency NUMBER(9),
    FOREIGN KEY (idAgency) REFERENCES AGENCY_(idAgency)
);
/

-->>>>>>>>>>>

ALTER TABLE EMPLOYEE_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>-------------------------------------------------------------------

ALTER TABLE AGENCY_ ADD IdManager NUMBER(9);
/

-->>>>>>>>>>>

ALTER TABLE AGENCY_ ADD FOREIGN KEY (IdManager) REFERENCES EMPLOYEE_(nif);
/
-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE CLIENT_(
    nif NUMBER(9) PRIMARY KEY,
    nameClient  VARCHAR(45),
    Contact ContactType,
    address AddressType,
    email VARCHAR(99),
    age number(3),
    dateBirth date,
    jobClient Varchar(45),
    maritalStatus VARCHAR(50) CHECK (maritalStatus IN ('SOLTEIRO', 'CASADO')),
    passwordCLient VARCHAR(45),
    idAgency NUMBER(9),
    FOREIGN KEY (idAgency) REFERENCES AGENCY_(idAgency)
);
/

-->>>>>>>>>>>

ALTER TABLE CLIENT_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>

--insert

-->>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CREATE OR REPLACE PROCEDURE UpdateAge as
begin
    UPDATE CLIENT_
    set age = trunc(months_between(sysdate, dateBirth)/12);
    COMMIT;
END;
/

call UpdateAge();

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE ACCOUNT_(
    idAccount NUMBER(9) PRIMARY KEY,
    creationDate DATE,
    balance float,
    status varchar(45) CHECK (status IN ('congelada', 'normal', 'etc')),
    nif NUMBER(9),
    idAgency NUMBER(9),
    idAccountType NUMBER(9),
    CONSTRAINT FK_ClientAccount FOREIGN KEY (nif) REFERENCES CLIENT_(nif),
    CONSTRAINT FK_AgencyAccount FOREIGN KEY (idAgency) REFERENCES AGENCY_(idAgency),
    CONSTRAINT FK_AcountTypeAccount FOREIGN KEY (idAccountType) REFERENCES ACCOUNTTYPE_(idAccountType)
);
/

ALTER TABLE ACCOUNT_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE ACCOUNT_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER ACCOUNT_trg
BEFORE INSERT ON ACCOUNT_
FOR EACH ROW
BEGIN
  SELECT ACCOUNT_seq.NEXTVAL
  INTO :new.idAccount
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE CARD_(
    idCard NUMBER(9) PRIMARY KEY,
    expirationDate DATE,
    pin number(4),
    CVC number(3),
    cardTYpe varchar(45) CHECK (cardTYpe IN ('Debido', 'credito')),
    idAccount NUMBER(9),
    CONSTRAINT FK_AcountCard FOREIGN KEY (idAccount) REFERENCES ACCOUNT_(idAccount)
);
/

-->>>>>>>>>>>

ALTER TABLE CARD_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE CARD_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER CARD_trg
BEFORE INSERT ON CARD_
FOR EACH ROW
BEGIN
  SELECT CARD_seq.NEXTVAL
  INTO :new.idCard
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE OWNER_(         
    idAccount NUMBER(9),
    nif NUMBER(9),
    FOREIGN KEY (idAccount) REFERENCES Account_(idAccount),
    FOREIGN KEY (nif) REFERENCES Client_(nif)
);
/

ALTER TABLE OWNER_ MOVE TABLESPACE NORMALS_TABLE_SPACE;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- TABLESPACE AND TABLE TRANSACTION.
-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLESPACE TRANSACTION_TABLE_SPACE
DATAFILE 'transactionV2.dbf' SIZE 100M
AUTOEXTEND ON NEXT 10M
MAXSIZE UNLIMITED;
/

-->>>>>>>>>>>-------------------------------------------------------------------

CREATE TABLE TRANSACTION_(
     idTransaction NUMBER(9) PRIMARY KEY,
     balance VARCHAR(45),
     dateTransaction date,
     status varchar(45) CHECK (status IN ('processando', 'concluido', 'etc')),
     idCard NUMBER(9),
     idTransactionType NUMBER(9),
    FOREIGN KEY (idCard) REFERENCES CARD_(idCard),
    FOREIGN KEY (idTransactionType) REFERENCES TRANSACTIONTYPE_(idTransactionType)
    
);
/

-->>>>>>>>>>>

ALTER TABLE TRANSACTION_ MOVE TABLESPACE TRANSACTION_TABLE_SPACE;
/

-->>>>>>>>>>>

CREATE SEQUENCE TRANSACTION_seq
  START WITH 1
  INCREMENT BY 1;
/
 
-->>>>>>>>>>>

CREATE OR REPLACE TRIGGER TRANSACTION_trg
BEFORE INSERT ON TRANSACTION_
FOR EACH ROW
BEGIN
  SELECT TRANSACTION_seq.NEXTVAL
  INTO :new.idTransaction
  FROM dual;
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- COMMENTS.
-->>>>>>>>>>>-------------------------------------------------------------------

COMMENT ON TABLE LOCATION_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre localizações, incluindo ID da localização, distrito/província 
e país.';
/

-->>>>>>>>>>>

COMMENT ON TABLE ACCOUNTTYPE_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre tipos de conta, incluindo ID do tipo de conta, nome, 
descrição e requisitos mínimos.';
/

-->>>>>>>>>>>

COMMENT ON TABLE TRANSACTIONTYPE_ IS 'Esta tabela destina-se ao armazenamento 
de informações sobre tipos de transação, incluindo ID do tipo de transação, 
nome, descrição, taxa aplicada e limite.';
/

-->>>>>>>>>>>

COMMENT ON TABLE AGENCY_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre agências, incluindo ID da agência, nome da agência, horário 
de funcionamento, número de funcionários, detalhes de contato e ID de 
localização referente à tabela LOCATION_.';
/

-->>>>>>>>>>>

COMMENT ON TABLE EMPLOYEE_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre funcionários, incluindo NIF, nome do funcionário, sobrenome, 
detalhes de contato, endereço, email, idade, data de nascimento, IBAN, cargo e 
salário.';
/

-->>>>>>>>>>>

COMMENT ON TABLE CLIENT_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre clientes, incluindo NIF, nome do cliente, detalhes de contato, 
endereço, email, idade, data de nascimento, profissão, estado civil e 
palavra-passe.';
/

-->>>>>>>>>>>

COMMENT ON TABLE ACCOUNT_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre contas, incluindo ID da conta, quando foi criada, saldo e 
estado.';
/

-->>>>>>>>>>>

COMMENT ON TABLE CARD_ IS 'Esta tabela destina-se ao armazenamento de 
informações sobre cartões, incluindo ID do cartão, data de validade, PIN, 
CVC e tipo de cartão.';
/

-->>>>>>>>>>>

COMMENT ON TABLE TRANSACTION_ IS 'Esta tabela destina-se ao armazenamento dos 
dados sobre uma transação, efetuada ou não, com dados sobre o montante, estado 
e data de início da transação.';
/
