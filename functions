
DROP PROCEDURE SP_ALL_INSERT;
/

DROP PROCEDURE SP_ALL_UPDATE;
/

DROP PROCEDURE SP_ALL_DELETE;
/

DROP PROCEDURE insert_transaction;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- FUnctions.
-->>>>>>>>>>>-------------------------------------------------------------------

DROP FUNCTION getTableName;
/

-->>>>>>>>>>> FUNCTION TO GET THE TABLE NAME

CREATE OR REPLACE FUNCTION getTableName(
        p_tableName VARCHAR
    ) RETURN VARCHAR
    IS
        tableFind varchar(99);
    BEGIN
        -- INSTR = INSTRING
        
        select TABLE_NAME 
        INTO tableFind
        FROM user_tables 
        WHERE INSTR(UPPER(TABLE_NAME), UPPER(p_tableName)) > 0
        ORDER BY INSTR(UPPER(TABLE_NAME), UPPER(p_tableName)) ASC
        FETCH FIRST 1 ROW ONLY;
        
        RETURN tableFind;
    END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

DROP FUNCTION getFieldName;
/

-->>>>>>>>>>> FUNCTION TO GET THE SPECIFIC FIELD NAME FROM TABLE

CREATE OR REPLACE FUNCTION getFieldName(
        p_tableName VARCHAR,
        p_fieldName VARCHAR
    ) RETURN VARCHAR
    IS
        fieldFind varchar(99);
    BEGIN
        -- INSTR = INSTRING
        
        select COLUMN_NAME 
        INTO fieldFind
        FROM ALL_TAB_COLUMNS 
        WHERE INSTR(UPPER(TABLE_NAME), UPPER(p_tableName)) > 0 
        AND INSTR(UPPER(COLUMN_NAME), UPPER(p_fieldName)) > 0
        ORDER BY INSTR(UPPER(COLUMN_NAME), UPPER(p_fieldName)) ASC
        FETCH FIRST 1 ROW ONLY;
            
        RETURN fieldFind;
    END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

DROP FUNCTION getFieldsNames;
/

-->>>>>>>>>>> FUNCTION TO GET ALL THE FIELDS NAMES FROM THE TABLE

CREATE OR REPLACE FUNCTION getFieldsNames(
        p_tableName VARCHAR
    ) RETURN VARCHAR
    IS
        fieldNames varchar(200);
    BEGIN
        SELECT LISTAGG(column_name, ', ') WITHIN GROUP (ORDER BY column_id) as fields_names
        INTO fieldNames
        FROM user_tab_columns
        WHERE table_name = p_tableName AND column_id > 1;
            
        RETURN fieldNames;
    END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

DROP FUNCTION getFieldCount;
/

-->>>>>>>>>>> FUNCTION TO GET THE NUMBER OF FIELDS IN THE TABLE

CREATE OR REPLACE FUNCTION getFieldCount(
        p_tableName VARCHAR
    ) RETURN VARCHAR
    IS
        fieldNumber NUMBER;
    BEGIN
        SELECT COUNT(*)-1 AS column_Number into fieldNumber
        FROM user_tab_columns
        WHERE table_name = p_tableName;
            
        RETURN fieldNumber;
    END;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-- PROCEDURES
-->>>>>>>>>>>-------------------------------------------------------------------

-- INSERT LOGS


CREATE OR REPLACE PROCEDURE SP_LOG_INSERT (
    levelMensageValue VARCHAR,
    tableName VARCHAR,
    errorValue VARCHAR
) AS 
BEGIN
    DECLARE
        v_getError varchar(999);
        
        v_getTable varchar(200);
        
        v_dateValue VARCHAR2(20);
    BEGIN
        v_getError := '' || errorValue;
        
        select getTableName(tableName) INTO v_getTable FROM dual;
        
        v_dateValue := TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS');
        
        INSERT /*+ PARALLEL APPEND */ INTO LOG_ (levelMensage, codeMessage, actionLocation, logDate) VALUES ( levelMensageValue , v_getError, v_getTable, TO_TIMESTAMP(v_dateValue, 'DD/MM/YYYY HH24:MI:ss'));
    END;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Insertion Error: ' || SQLERRM);
END;
/

-->>>>>>>>>>
/*
BEGIN
    SP_LOG_INSERT('TRANSACTION_', 'testee');
END;
/
*/

-->>>>>>>>>>>-------------------------------------------------------------------

-- INSERT 4 ALL


CREATE OR REPLACE PROCEDURE SP_ALL_INSERT (
    tableName VARCHAR,
    v_insert multiObjectFunction
) AS 
BEGIN
    DECLARE
        v_getTable varchar(200);
        
        v_nField NUMBER;        
        v_FieldNames VARCHAR(200);
        v_values VARCHAR(200) := '';
        
        v_insert_query VARCHAR(200);
    BEGIN     
        SAVEPOINT startInsert;
        
        select getTableName(tableName) INTO v_getTable FROM dual;
        
        ------------------------------------------------------------------------
        
        -- Shows the number of fiels of the table
        v_nField := getFieldCount(v_getTable);
        
        ------------------------------------------------------------------------
        
        -- shows the field of the tables
        v_FieldNames := getFieldsNames(v_getTable);
        
        ------------------------------------------------------------------------
        
        FOR i IN 1..v_nField LOOP
            IF i > 1 THEN
                IF i > v_insert.count then
                    v_values := v_values || ''', ''' || '';
                ELSE
                    v_values := v_values || ''', ''' || v_insert(i);
                END IF;
            ELSE
                v_values := v_values || v_insert(i);
            END IF;
        END LOOP;
        
        ------------------------------------------------------------------------
        
        v_insert_query := 'INSERT /*+ PARALLEL APPEND */ INTO ' || v_getTable || ' (' || v_FieldNames || ') VALUES (''' || v_values || ''')';
        
        EXECUTE IMMEDIATE v_insert_query;
        COMMIT;

        BEGIN
            SP_LOG_INSERT('Imformation', tableName, v_insert_query || ' - successful ');
        END;
    END;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO startInsert;
        
        BEGIN
            SP_LOG_INSERT('Error', tableName, SQLERRM);
        END;
END;
/

-->>>>>>>>>>

DECLARE
    insertValues multiObjectFunction;
BEGIN
    insertValues := multiObjectFunction('value1', 'value2', 'value3', 'value4', 'value5');

    --SP_ALL_INSERT('transaction_', insertValues);
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

-- UPDATE 4 ALL

CREATE OR REPLACE PROCEDURE SP_ALL_UPDATE (
    u_tableName VARCHAR,
    u_update multiObjectFunction,
    u_condition multiObjectFunction
) AS 
BEGIN
     DECLARE
         v_getTable varchar(200);
         v_getFieldUpdate varchar(200);
         v_getFieldcondition varchar(200);

         v_conditionFieldcondition varchar(200);
         
         v_insert_query VARCHAR(200);
     BEGIN
        SAVEPOINT startInsert;
        
        select getTableName(u_tableName) INTO v_getTable FROM dual;
        select getFieldName(v_getTable, u_update(1)) INTO v_getFieldUpdate FROM dual;
        select getFieldName(v_getTable, u_condition(1)) INTO v_getFieldcondition FROM dual;
    
        ------------------------------------------------------------------------
        
        IF u_condition.COUNT >= 3 THEN
            v_conditionFieldcondition := u_condition(3);
        ELSE
            v_conditionFieldcondition := '=';
        END IF;
        
        ------------------------------------------------------------------------
        
        v_insert_query := 'UPDATE /*+ PARALLEL */' || v_getTable  || ' SET ' || v_getFieldUpdate ||' = ''' || u_update(2) ||''' WHERE ' || v_getFieldcondition ||' ' || v_conditionFieldcondition || ' ' || u_condition(2) || '';
        
        ------------------------------------------------------------------------
        
        EXECUTE IMMEDIATE v_insert_query; 
        COMMIT;

        BEGIN
            SP_LOG_INSERT('Imformation', tableName, v_insert_query || ' - successful ');
        END;
    END;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO startInsert;
        
        BEGIN
            SP_LOG_INSERT('Error', u_tableName, SQLERRM);
        END;
END;
/

-->>>>>>>>>>>

DECLARE
    UpdateValues multiObjectFunction;
    coditionValues multiObjectFunction;
BEGIN
    UpdateValues := multiObjectFunction('descri', 'testeAAAAAAA' );
    coditionValues := multiObjectFunction('idAccountType', '3', '=');    
    
    --SP_ALL_UPDATE('ACCOUNTTYP', UpdateValues, coditionValues);
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------

-- DELETE 4 ALL

CREATE OR REPLACE PROCEDURE SP_ALL_DELETE (
    u_tableName VARCHAR,
    u_condition multiObjectFunction
) AS 
BEGIN
     DECLARE
         v_getTable varchar(200);
         v_getFieldcondition varchar(200);
         
          v_conditionFieldcondition varchar(200);
         
         v_insert_query VARCHAR(200);
     BEGIN
        SAVEPOINT startInsert;
        
        select getTableName(u_tableName) INTO v_getTable FROM dual;
        select getFieldName(v_getTable, u_condition(1)) INTO v_getFieldcondition FROM dual;
    
        ------------------------------------------------------------------------
        
        IF u_condition.COUNT >= 3 THEN
            v_conditionFieldcondition := u_condition(3);
        ELSE
            v_conditionFieldcondition := '=';
        END IF;
        
        ------------------------------------------------------------------------
        
        v_insert_query := 'DELETE /*+ PARALLEL */ FROM ' || v_getTable  || ' WHERE ' || v_getFieldcondition ||' '|| v_conditionFieldcondition ||' ''' || u_condition(2) || '''';

        ------------------------------------------------------------------------
        
        EXECUTE IMMEDIATE v_insert_query; 
        COMMIT;

        BEGIN
            SP_LOG_INSERT('Imformation', tableName, v_insert_query || ' - successful ');
        END;
    END;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK TO startInsert;
    
        BEGIN
            SP_LOG_INSERT('Error', u_tableName, SQLERRM);
        END;
END;
/

-->>>>>>>>>>>

DECLARE
    coditionValues multiObjectFunction;
BEGIN
    coditionValues := multiObjectFunction('IDACCO', '6', '=');    

    --SP_ALL_DELETE('ACCOUNTTYP', coditionValues);
END;
/

-->>>>>>>>>>>-------------------------------------------------------------------
-->> PROCEDURE PARA INSERCAO DE REGISTOS DE TRANSACAO
CREATE OR REPLACE PROCEDURE insert_transaction(
    amount_VAR NUMBER,
    dateTransaction_VAR DATE,
    nameTransaction_VAR VARCHAR,
    status_VAR VARCHAR,
    idCard_VAR NUMBER,
    idTransactionType_VAR NUMBER,
    idAccount_VAR NUMBER,
    idOwner_VAR NUMBER,
    idRecipient_Account_VAR NUMBER
) AS
    v_account_status VARCHAR(10);
BEGIN

    SELECT status INTO v_account_status FROM ACCOUNT_ WHERE idAccount = idAccount_VAR; --Obtain the status of the account
    
    
    IF idTransactionType_VAR = 5 THEN
        IF idRecipient_Account_VAR IS NULL THEN         
            DBMS_OUTPUT.PUT_LINE('CHK_TypeBtwnTwoAcc constraint violation');
        ELSIF idAccount_VAR = idRecipient_Account_VAR THEN
            DBMS_OUTPUT.PUT_LINE('CHK_AccDIFRecip constraint violation');
        ELSIF v_account_status = 'congelada' THEN
            DBMS_OUTPUT.PUT_LINE('CHK_FrozenAccount constraint violation');
        ELSE
            --CONSTRAINTS PASSARAM
            INSERT INTO TRANSACTION_ (idTransaction, amount, dateTransaction, status, nameTransaction, idCard, idTransactionType, idAccount, idOwner, idRecipient_Account)
            VALUES (DEFAULT, amount_VAR, dateTransaction_VAR, status_VAR, nameTransaction_VAR, idCard_VAR, idTransactionType_VAR, idAccount_VAR, idOwner_VAR, idRecipient_Account_VAR);

            --RETIRAR DO EMISSARIO
            UPDATE ACCOUNT_
            SET balance = balance + amount_VAR
            WHERE idAccount = idAccount_VAR;

            --ADICIONAR AO RECEPIENTE
            UPDATE ACCOUNT_
            SET balance = balance - amount_VAR
            WHERE idAccount = idRecipient_Account_VAR;
        END IF;
    ELSIF idTransactionType_VAR <> 5 THEN
        -- Check CONSTRAINTS before performing updates
        IF idRecipient_Account_VAR IS NOT NULL THEN
            DBMS_OUTPUT.PUT_LINE('CHK_DIFTypeTwoAcc constraint violation');
        ELSE
            -- All constraints passed, proceed with the updates
            INSERT INTO TRANSACTION_ (idTransaction, amount, dateTransaction, status, nameTransaction, idCard, idTransactionType, idAccount, idOwner)
            VALUES (DEFAULT, amount_VAR, dateTransaction_VAR, status_VAR, nameTransaction_VAR, idCard_VAR, idTransactionType_VAR, idAccount_VAR, idOwner_VAR);

            --RETIRAR/ADICIONAR AO EMISSARIO
            UPDATE ACCOUNT_
            SET balance = balance + amount_VAR
            WHERE idAccount = idAccount_VAR;
        END IF;
    END IF;
END;
/


/*
BEGIN insert_transaction(
        10, -- amount_VAR
        TO_DATE('2023-11-05', 'YYYY-MM-DD'), -- dateTransaction_VAR
        'Example Transaction', -- nameTransaction_VAR
        'processando', -- status_VAR
        1, -- idCard_VAR
        5, -- idTransactionType_VAR
        2, -- idAccount_VAR
        1, -- idOwner_VAR
        1 -- idRecipient_Account_VAR
    );
    COMMIT;
END;
/

*/
